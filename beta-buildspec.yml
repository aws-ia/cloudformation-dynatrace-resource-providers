version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.x
    commands:
      - echo Entered the install phase...
      - echo About to build $RESOURCE_PATH
      - export PATH="/usr/local/bin:$PATH"
      - /usr/local/bin/dockerd-entrypoint.sh
      - cat /var/log/docker.log
      - INTEG_STACK_NAME="integ-$(echo $RESOURCE_PATH | tr '[:upper:]' '[:lower:]')"
      - echo $INTEG_STACK_NAME
      - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
      - export NVM_DIR="$HOME/.nvm"
      - echo "Loading nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nvm install 16 && nvm install-latest-npm
      - npm --version
      - node --version
      - pwd
      - ls

  build:
    commands:
      - pip uninstall aws-sam-cli -y
      - cfn --version
      - pip show cloudformation-cli-typescript-plugin
      - pip show cloudformation-cli
      - pip install cloudformation-cli -U
      - pip install cloudformation-cli-typescript-plugin -U
      - pip show cloudformation-cli-typescript-plugin
      - pip show cloudformation-cli
      - echo Entered the build phase...
      - npm install && npm run build
      - cd $RESOURCE_PATH
      - TYPE_NAME=$(cat .rpdk-config | jq -r .typeName)
      - export TYPE_NAME=$TYPE_NAME
      - printenv TYPE_NAME
      - ./setup.sh
      - cfn validate
      - cfn generate
      - npm install && npm run build
      - echo Debug SAM build...
      - sam --version
      - which sam
      - ls -l /usr/local/bin/sam
      - sudo rm -rf /usr/local/bin/sam
      - sudo rm -rf /usr/local/aws-sam-cli
      - curl https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip -O -L
      - unzip -q -o aws-sam-cli-linux-x86_64.zip -d sam-installation
      - sudo ./sam-installation/install
      - sam --version
      - which sam
      - cfn submit --set-default -vv
      - python ../get_type_configuration.py
      - aws cloudformation set-type-configuration --type RESOURCE --type-name $TYPE_NAME --configuration-alias default --configuration $(cat /root/.cfn-cli/typeConfiguration.json| jq -c "")
      - INTEG_STACK_NAME="integ-$(echo $RESOURCE_PATH | tr '[:upper:]' '[:lower:]')"
      - echo $INTEG_STACK_NAME
      - aws cloudformation create-stack --stack-name $INTEG_STACK_NAME --template-body file://test/integ.yml
      - aws cloudformation wait stack-create-complete --stack-name $INTEG_STACK_NAME
    finally:
      - cat rpdk.log
      - INTEG_STACK_NAME="integ-$(echo $RESOURCE_PATH | tr '[:upper:]' '[:lower:]')"
      - echo $INTEG_STACK_NAME
      - aws cloudformation delete-stack --stack-name $INTEG_STACK_NAME
      - ./cleanup.sh    
artifacts:
  files:
    - $BUILD_FILE_NAME 
  name: extensions-build