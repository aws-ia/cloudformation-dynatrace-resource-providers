---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  The CloudFormation template creates all resources necessary to implement AWS well-architected pillars with an automated
  workflow in Dynatrace. This showcases the use of the 2 news CloudFormation resources types:
  - `Dynatrace::Automation::Workflow`
  - `Dynatrace::Automation::SiteReliabilityGuardian`
  as well as the integration with the existing resource type `Dynatrace::Environment::ServiceLevelObjective`. The template
  does not implement all the alerting defined in https://www.dynatrace.com/news/blog/implementing-aws-well-architected-pillars/

Parameters:
  TargetResponseTime:          { Type: Number, Default: 500 }
  WarningResponseTime:         { Type: Number, Default: 400 }
  TargetCpuUsage:              { Type: Number, Default: 60  }
  WarningCpuUsage:             { Type: Number, Default: 50  }
  TargetVulnerability:         { Type: Number, Default: 8.5 }
  WarningVulnerability:        { Type: Number, Default: 7.5 }
  TargetOptimizeCpu:           { Type: Number, Default: 10  }
  WarningOptimizeCpu:          { Type: Number, Default: 15  }
  TargetOptimizeResponseTime:  { Type: Number, Default: 300 }
  WarningOptimizeResponseTime: { Type: Number, Default: 200 }
  TargetOptimizeDiskSize:      { Type: Number, Default: 10  }
  WarningOptimizeDiskSize:     { Type: Number, Default: 15  }
  TargetAvailability:          { Type: Number, Default: 95  }
  WarningAvailability:         { Type: Number, Default: 90  }
  TargetOutOfMemory:           { Type: Number, Default: 5   }
  WarningOutOfMemory:          { Type: Number, Default: 3   }
  TargetApdexRating:           { Type: Number, Default: 90  }
  WarningApdexRating:          { Type: Number, Default: 95  }
  TargetCo2:                   { Type: Number, Default: 40  }
  WarningCo2:                  { Type: Number, Default: 30  }
  TargetUtilization:           { Type: Number, Default: 10  }
  WarningUtilization:          { Type: Number, Default: 15  }
  ApdexRatingSloMetricName:    { Type: String, Default: my_new_real_user_experience_objective }


Resources:

  # Guardians can optionally reference a separate SLO; here we define one
  # that will be used by our "operational excellence" guardian (below).
  ApdexRatingSlo:
    Type: Dynatrace::Environment::ServiceLevelObjective
    Properties:
      Name:        My new real-user experience objective
      Description: This is an Apdex rating experience SLO
      MetricName:  !Ref ApdexRatingSloMetricName
      MetricExpression: |
        (100)
        * (builtin:apps.web.actionCount.category:filter(eq("Apdex category",SATISFIED)):splitBy())
        / (builtin:apps.web.actionCount.category:splitBy())
      Timeframe:   -1w
      Filter:      'type("APPLICATION"),entityName.equals("myApplication")'
      Target:      !Ref TargetApdexRating
      Warning:     !Ref WarningApdexRating
      EvaluationType: AGGREGATE
      HasAccess:   true


  # Pillar 1: Operational Excellence
  OperationalExcellenceSrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Operational Excellence
      Description: Operational Excellence Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Apdex rating validation
          Description:   Apdex rating validation of a web application
          ObjectiveType: REFERENCE_SLO
          ComparisonOperator: LESS_THAN_OR_EQUAL
          ReferenceSlo: !Sub
            - func:slo.${SloName}
            - SloName: !Ref ApdexRatingSloMetricName


  # Pillar 2: Security
  SecuritySrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Security
      Description: Security Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Vulnerability Analysis
          Description:   Runtime Vulnerability Analysis for a Process Group Instance – Davis Security Assessment Score
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetVulnerability
          Warning:       !Ref WarningVulnerability
          DqlQuery: |
            fetch events
            | filter event.kind == "SECURITY_EVENT"
            | filter event.type == "VULNERABILITY_STATE_REPORT_EVENT"
            | filter event.level == "ENTITY"
            | filter in("PROCESSGROUP_INSTANCE_ID",affected_entity.affected_processes.ids)
            | sort timestamp, direction:"descending"
            | summarize { status=takeFirst(vulnerability.resolution.status), score=takeFirst(vulnerability.davis_assessment.score), affected_processes=takeFirst(affected_entity.affected_processes.ids) }, by: {vulnerability.id, affected_entity.id}
            | filter status == "OPEN"
            | summarize maxScore=takeMax(score)


  # Pillar 3: Reliability
  ReliabilitySrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Reliability
      Description: Reliability Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Availability validation
          Description:   Success Rate – Availability Validation with Synthetic Monitoring
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetAvailability
          Warning:       !Ref WarningAvailability
          DqlQuery: |
            fetch logs
            | filter log.source == "logs/requests"
            | parse content,"JSON:request"
            | fieldsAdd httpRequest = request[httpRequest]
            | fieldsAdd httpStatus = httpRequest[status]
            | fieldsAdd success = toLong(httpStatus < 400)
            | summarize successRate = sum(success)/count() * 100 // percentage

        - Name:          Out Of Memory validation
          Description:   Number of Out of memory (OOM) kills of a container in the pod to be less than 5
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetAvailability
          Warning:       !Ref WarningAvailability
          DqlQuery: |
            timeseries oom_kills = avg(dt.kubernetes.container.oom_kills), filter: in(k8s.cluster.name,"CLUSTER-NAME") and in(k8s.namespace.name,"NAMESPACE-NAME") and in(k8s.workload.kind,"statefulset") and in (k8s.workload.name,"cassandra-workload-1")
            | fields sum = arraySum(oom_kills) // num of oom_kills


  # Pillar 4: Performance Efficiency
  PerformanceEfficiencySrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Performance Efficiency
      Description: Performance Efficiency Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Response time under high
          Description:   Validate if response time is increasing under high load utilizing OpenTelemetry spans
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetResponseTime
          Warning:       !Ref WarningResponseTime
          DqlQuery: |
            fetch spans
            | filter endpoint.name == "/api/getProducts"
            | filter k8s.namespace.name == "catalog"
            | filter k8s.container.name == "product-service"
            | filter http.status_code == 200
            | summarize avg(duration) // in milliseconds

          # TODO: The DQL query fails the validation from Dynatrace. Is it because we are missing from data or something else?
#        - Name:          CPU usage
#          Description:   Check if process CPU usage is in a valid range. The PROCESS_GROUP_INSTANCE-ID id to be referenced as a parameter from the workflow
#          ObjectiveType: DQL
#          ComparisonOperator: LESS_THAN_OR_EQUAL
#          Target:        !Ref TargetCpuUsage
#          Warning:       !Ref WarningCpuUsage
#          DqlQuery: |
#            timeseries val=avg(dt.process.cpu.usage), filter:dt.entity.process_group_instance in ["PROCESS_GROUP_INSTANCE-ID"]
#            | fields avg = arrayAvg(val) // percentage


  # Pillar 5: Cost Optimization
  CostOptimizationSrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Cost Optimization
      Description: Cost Optimization Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Optimize container CPU limit
          Description:   Reduce CPU size and cost by checking CPU usage
          ObjectiveType: DQL
          ComparisonOperator: GREATER_THAN_OR_EQUAL
          Target:        !Ref TargetOptimizeCpu
          Warning:       !Ref WarningOptimizeCpu
          DqlQuery: |
            timeseries cpu = avg(dt.containers.cpu.usage_percent), filter: in(dt.containers.name, "CONTAINER-NAME")
            | fields avg = arrayAvg(cpu) // percentage

        - Name:          Response Time of the container
          Description:   Response time of the container that is subject to CPU reduction objective due to Cost Optimization
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetOptimizeResponseTime
          Warning:       !Ref WarningOptimizeResponseTime
          DqlQuery: |
            fetch logs
            | filter k8s.container.name == "CONTAINER-NAME"
            | filter k8s.namespace.name == "CONTAINER-NAMESPACE"
            | filter matchesPhrase(content, "/api/uri/path")
            | parse content, "DATA '/api/uri/path' DATA 'rt:' SPACE? FLOAT:responsetime "
            | filter isNotNull(responsetime)
            | summarize avg(responsetime) // in milliseconds

        - Name:          Optimize disk size
          Description:   Reduce disk size and re-validate
          ObjectiveType: DQL
          ComparisonOperator: GREATER_THAN_OR_EQUAL
          Target:        !Ref TargetOptimizeDiskSize
          Warning:       !Ref WarningOptimizeDiskSize
          DqlQuery: |
            timeseries disk_used = avg(dt.host.disk.used.percent), filter: in(dt.entity.host,"HOST_ID")
            | fields avg = arrayAvg(disk_used) // percentage


  # Pillar 6: Sustainability
  SustainabilitySrg:
    Type: Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        Sustainability
      Description: Sustainability Guardian
      Tags:
        - "usecase:sixpillars"
      Variables:
        - Name: version
          Definition: "1.0.0"
      Objectives:
        - Name:          Carbon Emission total for the host running the application
          Description:   The host id to be referenced as a parameter from the workflow
          ObjectiveType: DQL
          ComparisonOperator: LESS_THAN_OR_EQUAL
          Target:        !Ref TargetCo2
          Warning:       !Ref WarningCo2
          DqlQuery: |
            fetch bizevents, from: -2h
            | filter event.type == "carbon.report"
            | filter dt.entity.host == "HOST-ID"
            | summarize toDouble(sum(emissions)), alias:total // total CO2e in grams

        - Name:          Under-utilized memory resource validation
          Description:   Identify underutilized memory by querying the memory usage with the memory limit in Kubernetes cluster
          ObjectiveType: DQL
          ComparisonOperator: GREATER_THAN_OR_EQUAL
          Target:        !Ref TargetUtilization
          Warning:       !Ref WarningUtilization
          DqlQuery: |
            timeseries memory=avg(dt.containers.memory.usage_percent), by:dt.entity.host
            | filter dt.entity.host == "HOST-ID"
            | fields avg = arrayAvg(memory) // percentage


  # Combine the above guardians into a single automation workflow
  Workflow:
    Type: Dynatrace::Automation::Workflow
    Properties:
      Actor:       4d02a174-f96f-4683-8388-53d7aef9d3cf
      Owner:       4d02a174-f96f-4683-8388-53d7aef9d3cf
      Title:       'Well-architected Six Pillars Evaluation - Sustainability'
      Description: 'Well-architected Six Pillars Workflow with Guardians by Cloudformation'
      IsPrivate:   'false'
      Trigger:
        EventTrigger:
          IsActive: true
          TriggerConfiguration:
            Type: "event"
            Value:
              EventType: bizevents
              Query: |
                event.type == "guardian.validation.triggered"
                AND tag.service == "RELEASE_PRODUCT"
                AND tag.stage   == "RELEASE_STAGE"
      Tasks:
        - Name:        performanceEfficiency
          Description: Performance Efficiency Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt PerformanceEfficiencySrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-10m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 1
        - Name:        security
          Description: Security Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt SecuritySrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-60m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 2
        - Name:        costOptimization
          Description: Cost Optimization Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt CostOptimizationSrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-10m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 3
        - Name:        reliability
          Description: Reliability Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt ReliabilitySrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-10m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 4
        - Name:        operationalExcellence
          Description: Operation Excellence Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt OperationalExcellenceSrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-60m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 5
        - Name:        sustainability
          Description: Sustainability Validation
          Action:      dynatrace.site.reliability.guardian:validate-guardian-action
          Input:
            objectId:       !GetAtt SustainabilitySrg.ObjectId
            executionId:    '{{ execution().id }}'
            expressionTo:   '{{ event()[''timeframe.to''] }}'
            expressionFrom: '{{ event()[''timeframe.from''] }}'
            timeframeSelector:
              to: now
              from_: now-40m
            timeframeInputType: expression
          Position:
            X: 0
            Y: 6
