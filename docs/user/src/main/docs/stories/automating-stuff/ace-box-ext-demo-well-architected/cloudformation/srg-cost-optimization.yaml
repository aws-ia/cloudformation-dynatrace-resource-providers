---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  AWS Well-Architeced Framework Pillar 5: Cost Optimization

  This CloudFormation template was manually derived from the Monaco source files in the
  `ace-box-ext-demo-well-architected` repository
  (https://github.com/dynatrace-ace/ace-box-ext-demo-well-architected/tree/main/roles/my-use-case/files/monaco/well_architected_framework_validation)
  specifically:

  * srg/cost/_config_template.yamlx
  * srg/cost/srg-cost.json


Parameters:

  # Application metadata
  ReleaseProduct:              { Type: String,       Default: "simplenode" }
  ReleaseStage:                { Type: String,       Default: "test" }
  UseCase:                     { Type: String,       Default: "sixpillars" }
  Tags:                        { Type: List<String>, Default: [ "usecase:sixpillars" ] }

  # Objective thresholds
  TargetCpuUsagePercent:       { Type: Number, Default:   5 }
  WarningCpuUsagePercent:      { Type: Number, Default:  15 }

  TargetDiskUsage:             { Type: Number, Default:  10 }
  WarningDiskUsage:            { Type: Number, Default:  15 }


Resources:

  CostOptimizationGuardian:
    Type:          Dynatrace::Automation::SiteReliabilityGuardian
    Properties:
      Name:        !Sub Six Pillars - Cost Optimization - ${ReleaseProduct}
      Description: Cost Guardian - Cost effectiveness of an application while having the similar performance
      Tags:        !Ref Tags
      Variables:   [ { Name: "version", Definition: "1.0.0" } ]
      Objectives:

        # objective - timeseries - cpu usage percent
        - Name:               Optimize container CPU limit
          Description: |
            If it fails, reduce the CPU size and revalidate the same objective against the other
            pillars
          ObjectiveType:      DQL
          ComparisonOperator: GREATER_THAN_OR_EQUAL
          Target:             !Ref TargetCpuUsagePercent
          Warning:            !Ref WarningCpuUsagePercent
          DqlQuery: !Sub
            - |
              timeseries val = avg(dt.containers.cpu.usage_percent),
              by:{dt.source_entity}
              | lookup
                [ fetch dt.entity.container_group_instance
                | fields id, pgis=contains[dt.entity.process_group_instance],lifetime
                | expand pgis
                | lookup
                  [ fetch dt.entity.process_group_instance
                  | fields id, metadata, tags, lifetime
                  | filter(matchesPhrase(tags,"DT_RELEASE_STAGE:${ReleaseStage}"))
                  | filter(matchesPhrase(tags,"DT_RELEASE_PRODUCT:${ReleaseProduct}"))
                  | filter(matchesPhrase(tags,"DT_RELEASE_VERSION:$version"))
                  | sort lifetime  desc
                  | summarize count(), by: {id}
                  ], sourceField: pgis , lookupField: id
                | filter pgis == lookup.id
                | sort lifetime  desc
                | summarize latest_container_group_instance_id = takeFirst(id)
                ], sourceField:dt.source_entity , lookupField:latest_container_group_instance_id
              | filter dt.source_entity == lookup.latest_container_group_instance_id
              | fields avg = arrayAvg(val)


        - Name:               Optimize Disk Usage
          Description: |
            If the below SLO fails, reduce the disk size and revalidate the same objective against
            the performance efficiency validation pillar. If the performance efficiency pillar
            passes, you achieved your cost reduction on the disk size
          ObjectiveType:      DQL
          ComparisonOperator: GREATER_THAN_OR_EQUAL
          Target:             !Ref TargetDiskUsage
          Warning:            !Ref WarningDiskUsage
          DqlQuery: !Sub
            - |
              timeseries disk_used = avg(dt.host.disk.used.percent) , by:{dt.entity.host}
              | lookup
                [ fetch dt.entity.host
                | fields id, pgi=contains[dt.entity.process_group_instance]
                ], sourceField:dt.entity.host, lookupField:id
              | filter dt.entity.host == lookup.id
              | expand lookup.pgi
              | fieldsAdd pgiStr=toString(lookup.pgi)
              | lookup
                [ fetch dt.entity.process_group_instance
                | fieldsAdd tags
                | filter(matchesPhrase(tags,"DT_RELEASE_STAGE:${ReleaseStage}"))
                | filter(matchesPhrase(tags,"DT_RELEASE_PRODUCT:${ReleaseProduct}"))
                | filter(matchesPhrase(tags,"DT_RELEASE_VERSION:$version"))
                | sort lifetime  desc
                | summarize pgi_id = takeFirst(id)
                ], sourceField:pgiStr, lookupField:pgi_id, prefix:"pg_"
              | filter isNotNull(pg_pgi_id)
              | fields avg = arrayAvg(disk_used)


Outputs:
  GuardianId:
    Description: Object ID of the Cost Optimization Guardian
    Value:       !GetAtt CostOptimizationGuardian.ObjectId
    Export:
      Name:      !Sub ${ReleaseProduct}-${ReleaseStage}-CostOptimizationGuardianId
